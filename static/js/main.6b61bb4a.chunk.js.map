{"version":3,"sources":["utils/utils.js","pages/login/index.js","components/NFT/index.js","pages/mint/index.js","pages/home/index.js","index.js","config.js"],"names":["nearConfig","getConfig","process","a","connect","Object","assign","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","near","window","walletConnection","WalletConnection","accountId","getAccountId","Contract","account","contractName","viewMethods","changeMethods","contract","logout","signOut","location","replace","origin","pathname","login","requestSignIn","Login","style","textAlign","marginTop","onClick","NFT","className","src","alt","networkId","Mint","React","useState","userHasNFT","setUserHasNFT","showNotification","useEffect","receivedNFT","nft_tokens","userTokens","hasNFT","some","token","token_id","console","log","mintNFT","nft_mint","receiver_id","metadata","title","description","media","BN","float","disabled","Notification","urlPrefix","target","rel","href","contractId","Home","isSignedIn","nearInitPromise","initContract","then","ReactDOM","render","document","querySelector","catch","error","CONTRACT_NAME","module","exports","env","nodeUrl","walletUrl","helperUrl","explorerUrl","keyPath","HOME","masterAccount","Error"],"mappings":"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","file":"static/js/main.6b61bb4a.chunk.js","sourcesContent":["import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'\nimport getConfig from \"../config\";\n\nconst nearConfig = getConfig(process.env.NODE_ENV || 'development')\n\n// Initialize contract & set global variables\nexport async function initContract() {\n  // Initialize connection to the NEAR testnet\n  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))\n\n  // Initializing Wallet based Account. It can work with NEAR testnet wallet that\n  // is hosted at https://wallet.testnet.near.org\n  window.walletConnection = new WalletConnection(near)\n\n  // Getting the Account ID. If still unauthorized, it's just empty string\n  window.accountId = window.walletConnection.getAccountId()\n\n  // Initializing our contract APIs by contract name and configuration\n  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {\n    // View methods are read only. They don't modify the state, but usually return some value.\n    viewMethods: ['nft_tokens'],\n    // Change methods can modify the state. But you don't receive the returned value when called.\n    changeMethods: ['nft_mint'],\n  })\n}\n\nexport function logout() {\n  window.walletConnection.signOut()\n  // reload page\n  window.location.replace(window.location.origin + window.location.pathname)\n}\n\nexport function login() {\n  // Allow the current app to make calls to the specified contract on the\n  // user's behalf.\n  // This works by creating a new access key for the user's account and storing\n  // the private key in localStorage.\n  window.walletConnection.requestSignIn(nearConfig.contractName)\n}\n","import 'regenerator-runtime/runtime'\nimport React from 'react'\n\nimport './index.css'\nimport {login} from \"../../utils/utils\";\n\nexport default function Login() {\n    return (\n        <main>\n            <h1>Welcome to NEAR!</h1>\n            <p>\n                To make use of the NEAR blockchain, you need to sign in. The button\n                below will sign you in using NEAR Wallet.\n            </p>\n            <p>\n                By default, when your app runs in \"development\" mode, it connects\n                to a test network (\"testnet\") wallet. This works just like the main\n                network (\"mainnet\") wallet, but the NEAR Tokens on testnet aren't\n                convertible to other currencies â€“ they're just for testing!\n            </p>\n            <p>\n                Go ahead and click the button below to try it out:\n            </p>\n            <p style={{textAlign: 'center', marginTop: '2.5em'}}>\n                <button onClick={login}>Sign in</button>\n            </p>\n        </main>\n    )\n}\n","import React from \"react\";\nimport './index.css'\n\nexport default function NFT() {\n    return (\n        <div className=\"mint\">\n            <img\n                src=\"https://ipfs.io/ipfs/bafkreihfkpgxnj2qbn7s46qmocqjrslbirarzsb3kx34g7bissojrcnl5q\"\n                alt=\"NFT image\"\n            />\n        </div>\n    )\n}","import 'regenerator-runtime/runtime'\nimport React, {useEffect} from 'react'\n\nimport getConfig from '../../config'\nimport NFT from \"../../components/NFT\";\nimport BN from \"bn.js\";\nimport './index.css'\nimport {logout} from \"../../utils/utils\";\n\nconst {networkId} = getConfig(process.env.NODE_ENV || 'development')\n\nexport default function Mint() {\n    // when the user has not yet interacted with the form, disable the button\n    const [buttonDisabled, setButtonDisabled] = React.useState(true)\n    const [userHasNFT, setUserHasNFT] = React.useState(false)\n\n    // after submitting the form, we want to show Notification\n    const [showNotification, setShowNotification] = React.useState(false)\n\n    useEffect(() => {\n        const receivedNFT = async () => {\n            const userTokens = await window.contract.nft_tokens()\n\n            const hasNFT = userTokens.some(token => token.token_id === `${window.accountId}-tanya-go-verse-token-5`)\n\n            if (window.accountId !== \"\") {\n                console.log(\n                    hasNFT\n                );\n\n                setUserHasNFT(\n                    hasNFT\n                );\n            }\n        };\n        receivedNFT();\n    }, []);\n\n    const mintNFT = async () => {\n        console.log('window.accountId', window.accountId);\n        await window.contract.nft_mint(\n            {\n                receiver_id: window.accountId,\n                token_id: `${window.accountId}-tanya-go-verse-token-5`,\n                metadata: {\n                    title: \"Support Ukraine NFT\",\n                    description: \"Support Ukraine NFT with verse of Tanya GO Kharkiv poetess who run from war and left her home...\",\n                    media: \"https://ipfs.io/ipfs/bafkreihfkpgxnj2qbn7s46qmocqjrslbirarzsb3kx34g7bissojrcnl5q\",\n                },\n            },\n            // {\n            //     token_id: `${window.accountId}-tanya-go-verse-token`,\n            //     metadata: {\n            //         title: \"Support Ukraine NFT\",\n            //         description: \"Support Ukraine NFT with verse of Tanya GO Kharkiv poetess who run from war and left her home...\",\n            //         media: \"https://ipfs.io/ipfs/bafkreihfkpgxnj2qbn7s46qmocqjrslbirarzsb3kx34g7bissojrcnl5q\",\n            //     },\n            //     receiver_id: window.accountId,\n            // },\n            300000000000000, // attached GAS (optional)\n            new BN(\"1000000000000000000000000\")\n        );\n    };\n\n    return (\n        <>\n            <header className=\"header\">\n                <button\n                    className=\"link\"\n                    style={{float: 'right'}}\n                    onClick={logout}\n                >\n                    Sign out\n                </button>\n            </header>\n            <main className=\"main\">\n                <NFT />\n                <div className=\"mint-button\">\n                    <button disabled={userHasNFT} onClick={mintNFT}>Mint</button>\n                </div>\n                {/*<h1>*/}\n                {/*  <label*/}\n                {/*    htmlFor=\"greeting\"*/}\n                {/*    style={{*/}\n                {/*      color: 'var(--secondary)',*/}\n                {/*      borderBottom: '2px solid var(--secondary)'*/}\n                {/*    }}*/}\n                {/*  >*/}\n                {/*    {greeting}*/}\n                {/*  </label>*/}\n                {/*  {' '/* React trims whitespace around tags; insert literal space character when needed *!/*/}\n                {/*  {window.accountId}!*/}\n                {/*</h1>*/}\n                {/*<form onSubmit={async event => {*/}\n                {/*  event.preventDefault()*/}\n\n                {/*  // get elements from the form using their id attribute*/}\n                {/*  const { fieldset, greeting } = event.target.elements*/}\n\n                {/*  // hold onto new user-entered value from React's SynthenticEvent for use after `await` call*/}\n                {/*  const newGreeting = greeting.value*/}\n\n                {/*  // disable the form while the value gets updated on-chain*/}\n                {/*  fieldset.disabled = true*/}\n\n                {/*  try {*/}\n                {/*    // make an update call to the smart contract*/}\n                {/*    await window.contract.set_greeting({*/}\n                {/*      // pass the value that the user entered in the greeting field*/}\n                {/*      message: newGreeting*/}\n                {/*    })*/}\n                {/*  } catch (e) {*/}\n                {/*    alert(*/}\n                {/*      'Something went wrong! ' +*/}\n                {/*      'Maybe you need to sign out and back in? ' +*/}\n                {/*      'Check your browser console for more info.'*/}\n                {/*    )*/}\n                {/*    throw e*/}\n                {/*  } finally {*/}\n                {/*    // re-enable the form, whether the call succeeded or failed*/}\n                {/*    fieldset.disabled = false*/}\n                {/*  }*/}\n\n                {/*  // update local `greeting` variable to match persisted value*/}\n                {/*  set_greeting(newGreeting)*/}\n\n                {/*  // show Notification*/}\n                {/*  setShowNotification(true)*/}\n\n                {/*  // remove Notification again after css animation completes*/}\n                {/*  // this allows it to be shown again next time the form is submitted*/}\n                {/*  setTimeout(() => {*/}\n                {/*    setShowNotification(false)*/}\n                {/*  }, 11000)*/}\n                {/*}}>*/}\n                {/*  <fieldset id=\"fieldset\">*/}\n                {/*    <label*/}\n                {/*      htmlFor=\"greeting\"*/}\n                {/*      style={{*/}\n                {/*        display: 'block',*/}\n                {/*        color: 'var(--gray)',*/}\n                {/*        marginBottom: '0.5em'*/}\n                {/*      }}*/}\n                {/*    >*/}\n                {/*      Change greeting*/}\n                {/*    </label>*/}\n                {/*    <div style={{ display: 'flex' }}>*/}\n                {/*      <input*/}\n                {/*        autoComplete=\"off\"*/}\n                {/*        defaultValue={greeting}*/}\n                {/*        id=\"greeting\"*/}\n                {/*        onChange={e => setButtonDisabled(e.target.value === greeting)}*/}\n                {/*        style={{ flex: 1 }}*/}\n                {/*      />*/}\n                {/*      <button*/}\n                {/*        disabled={buttonDisabled}*/}\n                {/*        style={{ borderRadius: '0 5px 5px 0' }}*/}\n                {/*      >*/}\n                {/*        Save*/}\n                {/*      </button>*/}\n                {/*    </div>*/}\n                {/*  </fieldset>*/}\n                {/*</form>*/}\n            </main>\n            {showNotification && <Notification />}\n        </>\n    )\n}\n\n// this component gets rendered by App after the form is submitted\nfunction Notification() {\n    const urlPrefix = `https://explorer.${networkId}.near.org/accounts`\n    return (\n        <aside>\n            <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href={`${urlPrefix}/${window.accountId}`}\n            >\n                {window.accountId}\n            </a>\n            {' '/* React trims whitespace around tags; insert literal space character when needed */}\n            called method: 'set_greeting' in contract:\n            {' '}\n            <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href={`${urlPrefix}/${window.contract.contractId}`}\n            >\n                {window.contract.contractId}\n            </a>\n            <footer>\n                <div>âœ” Succeeded</div>\n                <div>Just now</div>\n            </footer>\n        </aside>\n    )\n}\n","import 'regenerator-runtime/runtime'\nimport React from 'react'\n\nimport './index.css'\nimport Login from \"../login\";\nimport Mint from \"../mint\";\n\nexport default function Home() {\n    return !window.walletConnection.isSignedIn() ? <Login /> : <Mint />\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './global.css'\nimport Home from \"./pages/home\";\nimport {initContract} from \"./utils/utils\";\n\nwindow.nearInitPromise = initContract()\n  .then(() => {\n    ReactDOM.render(\n      <Home />,\n      document.querySelector('#root')\n    )\n  })\n  .catch(console.error)\n","const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nftexample.nfspring.testnet'\n\nfunction getConfig(env) {\n  switch (env) {\n\n  case 'production':\n  case 'mainnet':\n    return {\n      networkId: 'testnet',\n      nodeUrl: 'https://rpc.testnet.near.org',\n      contractName: CONTRACT_NAME,\n      walletUrl: 'https://wallet.testnet.near.org',\n      helperUrl: 'https://helper.testnet.near.org',\n      explorerUrl: 'https://explorer.testnet.near.org',\n    }\n  case 'development':\n  case 'testnet':\n    return {\n      networkId: 'testnet',\n      nodeUrl: 'https://rpc.testnet.near.org',\n      contractName: CONTRACT_NAME,\n      walletUrl: 'https://wallet.testnet.near.org',\n      helperUrl: 'https://helper.testnet.near.org',\n      explorerUrl: 'https://explorer.testnet.near.org',\n    }\n  case 'betanet':\n    return {\n      networkId: 'betanet',\n      nodeUrl: 'https://rpc.betanet.near.org',\n      contractName: CONTRACT_NAME,\n      walletUrl: 'https://wallet.betanet.near.org',\n      helperUrl: 'https://helper.betanet.near.org',\n      explorerUrl: 'https://explorer.betanet.near.org',\n    }\n  case 'local':\n    return {\n      networkId: 'local',\n      nodeUrl: 'http://localhost:3030',\n      keyPath: `${process.env.HOME}/.near/validator_key.json`,\n      walletUrl: 'http://localhost:4000/wallet',\n      contractName: CONTRACT_NAME,\n    }\n  case 'test':\n  case 'ci':\n    return {\n      networkId: 'shared-test',\n      nodeUrl: 'https://rpc.ci-testnet.near.org',\n      contractName: CONTRACT_NAME,\n      masterAccount: 'test.near',\n    }\n  case 'ci-betanet':\n    return {\n      networkId: 'shared-test-staging',\n      nodeUrl: 'https://rpc.ci-betanet.near.org',\n      contractName: CONTRACT_NAME,\n      masterAccount: 'test.near',\n    }\n  default:\n    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)\n  }\n}\n\nmodule.exports = getConfig\n"],"sourceRoot":""}